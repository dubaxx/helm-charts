apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cb-haproxy
  namespace: {{ .Values.global.namespace }}
  labels:
    app: cb-haproxy
spec:
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: cb-haproxy
  serviceName: cb-haproxy-service
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: cb-haproxy
        app.kubernetes.io/name: managed-prom
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - cb-haproxy
                topologyKey: "topology.kubernetes.io/zone"
      volumes:
        - name: haproxy-config-volume
          secret:
            secretName: cb-haproxy-config 
        - name: haproxy-cert-volume
          emptyDir: {}
        {{- if .Values.global.mtlsHAProxy}}
        - name: haproxy-mtls-cert-volume
          emptyDir: {}
        {{- end}}
      serviceAccountName: {{ .Values.global.gcp.gsmReadServiceAccount }}
      initContainers:
        - name: check-clearblade-readiness
          image: ellerbrock/alpine-bash-curl-ssl
          command:
          - bash
          - "-c"
          - |
            set -x;
            while [ $(curl -sw '%{http_code}' "clearblade-service.{{ .Values.global.namespace }}.svc.cluster.local:9000/api/about" -o /dev/null) -ne 200 ]; do
              echo waiting for clearblade; sleep 5;
            done;
            # Give clearblade just a little more time to really start for real
            sleep 10;
        - name: init
          image: google/cloud-sdk:slim
          command: ["/bin/bash"]
          args:
            - -c
            - |
              certificates="$(gcloud secrets versions access "latest" --secret={{ .Values.global.namespace }}_tls-certificates)"
              IFS='|' read -d '' -ra certificate_array <<< "$certificates"
              x=0
              for i in "${certificate_array[@]}"
              do
                echo "$i" > /etc/ssl/clearblade-$x.pem
                ((x=x+1))
              done
            {{- if .Values.global.mtlsHAProxy}}
              mtls_cert="$(gcloud secrets versions access "latest" --secret={{ .Values.global.namespace }}_mtls-certificate)"
              echo "$mtls_cert"  > /etc/mtls/sampleCACertificate.pem
            {{- end}}
          volumeMounts:
           - name: haproxy-cert-volume
             mountPath: /etc/ssl/
          {{- if .Values.global.mtlsHAProxy}}
           - name: haproxy-mtls-cert-volume
             mountPath: /etc/mtls/
           {{- end}}
      {{- if .Values.global.tolerations }}
      tolerations:
{{ .Values.global.tolerations | toYaml | indent 6 }}
      {{- end }}
      {{- if .Values.global.nodeSelector }}
      nodeSelector:
        {{ .Values.global.nodeSelector }}
      {{- end }}
      securityContext:
        sysctls:
          - name: net.ipv4.ip_local_port_range
            value: "2000 65001"
      containers:
        - name: cb-haproxy
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          resources:
            requests:
              memory: {{ .Values.resourceRequests.memory }}
              cpu: {{ .Values.resourceRequests.cpu }}
            limits:
              cpu: {{ .Values.resourceLimits.cpu }}
              memory: {{ .Values.resourceLimits.memory }}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: haproxy-config-volume
              mountPath: /usr/local/etc/haproxy/
            - name: haproxy-cert-volume
              mountPath: /etc/ssl/
            {{- if .Values.global.mtlsHAProxy}}
            - name: haproxy-mtls-cert-volume
              mountPath: /etc/mtls/
            {{- end}}
{{- if .Values.monitoringEnabled }}
        - name: haproxy-exporter
          image: prom/haproxy-exporter:latest
          command: ["haproxy_exporter"]
          args: ["--haproxy.scrape-uri=http://{{ .Values.stats_auth }}@cb-haproxy-metrics-service.{{ .Values.global.namespace }}.svc.cluster.local:9876/haproxy_stats?stats;csv"]
          ports:
            - containerPort: 9101
              name: metrics
          resources:
            limits:
              cpu: 250m
              memory: 180Mi
            requests:
              cpu: 102m
              memory: 180Mi
{{- if eq .Values.global.GMP false}}
{{- else }}
---
apiVersion: monitoring.googleapis.com/v1
kind: PodMonitoring
metadata:
  name: {{ .Values.global.namespace }}-pod-monitoring
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: managed-prom
  endpoints:
    - port: metrics
      interval: 5s
{{- end }}
{{- end }}