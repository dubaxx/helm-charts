apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cb-postgres
  namespace: {{ default "clearblade" .Values.global.namespace }}
  labels:
    app: cb-postgres
spec:
  serviceName: cb-postgres-headless
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: cb-postgres
  template:
    metadata:
      name: cb-postgres
      labels:
        app: cb-postgres
        app.kubernetes.io/name: managed-prom
    spec:
      {{- if eq .Values.global.cloud "aws"}}
      nodeSelector:
        topology.kubernetes.io/zone: {{ .Values.global.eksEbsPostgresVolumeAZ }}
      {{- end }}
      {{- if eq .Values.global.secretManager "gsm"}}
      serviceAccountName: {{ .Values.global.gcpGSMServiceAccount }}
      initContainers:
        - name: init
          image: google/cloud-sdk:slim
          command: ["/bin/sh"]
          args:
            - -c
            - >-
                echo "export PRIMARY_PASSWORD=$(gcloud secrets versions access latest --secret={{ default "clearblade" .Values.global.namespace }}_postgres-primary-password)" >> /env/db/vars &&
                echo "export REPLICA_PASSWORD=$(gcloud secrets versions access latest --secret={{ default "clearblade" .Values.global.namespace }}_postgres-replica-password)" >> /env/db/vars &&
                echo "export POSTGRES_PASSWORD=$(gcloud secrets versions access latest --secret={{ default "clearblade" .Values.global.namespace }}_postgres-postgres-password)" >> /env/db/vars
          volumeMounts:
            - name: postgres-env-vars-volume
              mountPath: /env/db
      {{- end }}
      {{- if eq .Values.global.secretManager "asm"}}
      initContainers:
        - name: init
          image: amazon/aws-cli:latest
          command: ["/bin/sh"]
          args:
            - -c
            - >-
                echo "export PRIMARY_PASSWORD=$(aws secretsmanager get-secret-value --secret-id {{ default "clearblade" .Values.global.namespace }}_postgres-primary-password --region us-east-1 --query SecretString --output text)" >> /env/db/vars &&
                echo "export REPLICA_PASSWORD=$(aws secretsmanager get-secret-value --secret-id {{ default "clearblade" .Values.global.namespace }}_postgres-replica-password --region us-east-1 --query SecretString --output text)" >> /env/db/vars &&
                echo "export POSTGRES_PASSWORD=$(aws secretsmanager get-secret-value --secret-id {{ default "clearblade" .Values.global.namespace }}_postgres-postgres-password --region us-east-1 --query SecretString --output text)" >> /env/db/vars
          volumeMounts:
            - name: postgres-env-vars-volume
              mountPath: /env/db
      {{- end }}
      containers:
        - name: cb-postgres
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            {{ if or (eq .Values.global.secretManager "gsm") (eq .Values.global.secretManager "asm")}}
            - -c
            - >-
                source /env/db/vars &&
                /docker-entrypoint/start-database.sh
            {{- else }}
            - -c
            - >-
                /docker-entrypoint/start-database.sh
            {{- end }}
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/clearblade
            - name: PGPORT
              value: "{{ .Values.port }}"
            - name: PRIMARY_USER
              value: {{ .Values.user.primary }}
            - name: REPLICA_USER
              value: {{ .Values.user.replica }}
              env:
            {{ if and (ne .Values.global.secretManager "gsm") (ne .Values.global.secretManager "asm")}}
            - name: PRIMARY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cb-postgres-secrets
                  key: primary-password
            - name: REPLICA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cb-postgres-secrets
                  key: replica-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cb-postgres-secrets
                  key: postgres-password
            {{- end }}
          ports:
            - containerPort: {{ .Values.port }}
          resources:
            requests:
              memory: {{ .Values.requestMemory }}
              cpu: {{ .Values.requestCPU }}
            limits:
              cpu: {{ .Values.limitCPU }}
              memory: {{ .Values.limitMemory }}

          volumeMounts:
            {{- if or (eq .Values.global.secretManager "gsm") (eq .Values.global.secretManager "asm")}}
            - mountPath: /env/db/
              name: postgres-env-vars-volume
            {{- end}}
            - mountPath: /var/lib/postgresql/data/
              name: pvc-cb-postgres

            - mountPath: /etc/postgresql/
              name: postgres-config-volume

            - mountPath: /docker-entrypoint/start-database.sh
              name: postgres-init-volume
              subPath: start-database.sh

            - mountPath: /docker-entrypoint-initdb.d/start-database.sh
              name: postgres-init-volume
              subPath: init-db.sh

            - mountPath: /dev/shm
              name: dshm

          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U $REPLICA_USER -d admin -h 127.0.0.1 -p $PGPORT
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U $REPLICA_USER -d admin -h 127.0.0.1 -p $PGPORT
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end}}
          {{- if .Values.global.monitoringenabled }}
          lifecycle:
            preStop:
              exec:
                command: ["kill", "-INT", "`head -1 /var/lib/postgresql/data/postmaster.pid`"]
        - name: postgres-exporter
          image: docker.io/prometheuscommunity/postgres-exporter:latest
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://{{ .Values.user.primary }}@127.0.0.1:{{ .Values.port }}/postgres?sslmode=disable"
          ports:
            - containerPort: 9187
              name: metrics
          resources:
            limits:
              cpu: 250m
              memory: 180Mi
            requests:
              cpu: 102m
              memory: 180Mi
          {{- end }}
      {{- if .Values.global.tolerations }}
      tolerations:
{{ .Values.global.tolerations | toYaml | indent 6 }}
      {{- end }}
      {{- if .Values.global.nodeSelector }}
      nodeSelector:
        {{ .Values.global.nodeSelector }}
      {{- end }}
      volumes:
        - name: postgres-config-volume
          configMap:
            name: postgres-config
        {{- if or (eq .Values.global.secretManager "gsm") (eq .Values.global.secretManager "asm")}}
        - name: postgres-env-vars-volume
          emptyDir: {}
        {{- end }}
        - name: postgres-init-volume
          configMap:
            name: postgres-init
            defaultMode: 0777
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
        {{- if eq .Values.replicas 1.0 }}
        - name: pvc-cb-postgres
          persistentVolumeClaim:
            claimName: pvc-cb-postgres-cb-postgres-0
        {{- end }}
  {{- if gt .Values.replicas 1.0 }}      
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: pvc-cb-postgres
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.global.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.storageSize }}
  {{- end }}